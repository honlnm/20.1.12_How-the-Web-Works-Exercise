PART ONE:

In your own terms, define the following terms:

- What is HTTP?
    defined as 'Hypertext Transfer Protocol'. Protocols are a set of rules on what the format of communication should be. So HTTP is defining the format of communication for web servers.
- What is a URL?
    defined as 'Universal Resource Locators'. URLs are not only used on browsers, but other places as well. It breaks down the protocol, hostname, port, resource, and/or query for the server.
- What is DNS?
    defined as 'Domain Name System'. It's like aphone book for IP Addresses.
- What is a query string?
    It's the string one would put in a search bar. It's an arguement.
- What are two HTTP verbs and how are they different?
    GET and POST. GET requests without side effects and POSt requests with side effects. When I say side-effects, I mean GET usually sends arguments through the query string, not affecting the data on the server at all. Whereas POST will send a request through the body, therefore changing the data on the server.
- What is an HTTP request?
    A HTTP request uses a method and comes from the web browser.
- What is an HTTP response?
    An HTTP response is when the server pulls the correct data and sends it to the web browser so you can view the requested URL page.
- What is an HTTP header? Give a couple examples of request and response headers you have seen.
    An HTTP header is the bits of data sent from the web broswer to the server. The server will also have header data it sends back to the web broswer.
    A couple examples:
        content-type: text/html
        Accept-Language: en;q=0.8
- What are the processes that happen when you type “http://somesite.com/some/page.html” into a browser?
    1. the broswer resolves the name into an IP Address using DNS
    2. the web browser will send a request to the site's server using the URL and header data it has. (Request)
    3. the site's server will talk to the database server and grab the requested information, if it exists. (Internal Work)
    4. the site's server will send the data it retrieved back to the web broswer to be loaded. (Response)
    5. The browser makes a DOM from that HTML and finds anything else needed.
    6. The browser makes separate HTTP requests for those resources and receives response from the server for each

PART TWO: Practice Tools

1. Using ***curl***, make a ***GET*** request to the *icanhazdadjoke.com* API to find all jokes involving the word “pirate”
{"current_page":1,"limit":20,"next_page":1,"previous_page":1,"results":[{"id":"QuscibaMClb","joke":"What does a pirate pay for his corn? A buccaneer!"},{"id":"2gii3LeN7Ed","joke":"Why couldn't the kid see the pirate movie? Because it was rated arrr!"},{"id":"SvzIBAQS0Dd","joke":"What did the pirate say on his 80th birthday? Aye Matey!"},{"id":"exXSCtkOKe","joke":"Why do pirates not know the alphabet? They always get stuck at \"C\"."},{"id":"SnOf2gqjiqc","joke":"Why are pirates called pirates? Because they arrr!"}],"search_term":"pirate","status":200,"total_jokes":5,"total_pages":1}
    
2.Use ***dig*** to find what the IP address is for *icanhazdadjoke.com*
; <<>> DiG 9.18.12-0ubuntu0.22.04.1-Ubuntu <<>> icanhazdadjoke.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 58320
;; flags: qr rd ad; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0
;; WARNING: recursion requested but not available

;; QUESTION SECTION:
;icanhazdadjoke.com.            IN      A

;; ANSWER SECTION:
icanhazdadjoke.com.     0       IN      A       104.21.66.15
icanhazdadjoke.com.     0       IN      A       172.67.198.173

;; Query time: 0 msec
;; SERVER: 172.23.48.1#53(172.23.48.1) (UDP)
;; WHEN: Wed Sep 06 14:37:33 CDT 2023
;; MSG SIZE  rcvd: 86

3.Make a simple web page and serve it using ***python3 -m http.server***. Visit the page in a browser.
127.0.0.1 - - [06/Sep/2023 14:54:55] "GET / HTTP/1.1" 200 -

PART THREE: Explore Dev Tools

Build a very simple HTML form that uses the GET method (it can use the same page URL for the action) when the form is submitted.

Add a field or two to the form and, after submitting it, explore in Chrome Developer tools how you can view the request and response headers.

Edit the page to change the form type to POST, refresh in the browser and re-submit. Do you still see the field in the query string? Explore in Chrome how you can view the request and response headers, as well as the form data.